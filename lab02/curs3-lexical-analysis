Program --> Analiza lexicala -- token (pereche lexem, categorie) --> Analiza sintactica

 <categorie, lexem>

 let x:Int <- 0\n\tin x+1
<Let, "let">
<Whitespace, " ">
<ObjectId, "x">
<Colon, ":">
<TypeId, "Int">
<Assign, "<-">
<Int, "0">
<Whitespace, "\n\t">
<In, "in">
<Whitespace, " ">
<ObjectId, "x">
<Plus, "+">
<Int, "1">

lookahead = numarul de caractere urmatoare care trebuie consulatate pentru a decide finalul unui token

lookahead marginit de o constanta

Expresii regulate
* 

(0 1 e ) (0 1 e) (0 1 e) (0 1 e)
 _ _ _ _
 3 3 3 3

 3*3*3*3

 lexer --> ii spune antlr-ului ca vom avea doar reguli lexicale

export CLASSPATH=".:<path-c˘atre-antlr>/antlr-4.8-complete.jar:$CLASSPATH"

alias antlr4=’java -jar <path-c˘atre-antlr>/antlr-4.8-complete.jar’

alias grun=’java org.antlr.v4.gui.TestRig’